var yaml = require('js-yaml')
  , Github = require('github-api')
  , ghMerge = require('./gh-merge')
  , async = require('async')
  , slug = require('slug')
  , $ = require('jquery')
  , dateformat = require('dateformat')

exports.init = init

var GH_TOKEN = 'a2af087c98412c3a61b097613b10ca889a887c99' // plz dont steal
  , GH_USER = 'mvrt-115'
  , GH_REPO = 'MVRT_Site'
  , GH_BRANCH = 'master'
  , POSTS_PATH = 'app/_posts/'

var gh = new Github({ token: GH_TOKEN, auth: 'basic' })
var repo = gh.getRepo(GH_USER, GH_REPO)


function init () {
  bindUIEvents()
}

function bindUIEvents () {
  $('[name="post"] button').click(function () {
    $(this).prop('disabled', true)
    post(
      $('#post-title').val(),
      $('#post-author').val(),
      $('#post-categories').val(),
      $('#post-text').val()
    )
  })
}

function post (title, author, categories, text) {

  var filename = createTitle(title)
    , body = createPost(title, author, categories, text)
    , branch = createBranchName(title)

  async.series([
    function (done) {
      repo.branch(GH_BRANCH, branch, function (err) {
        if (err) return done(err)
        done()
      })
    },
    function (done) {
      repo.write(branch, POSTS_PATH + filename, body, 'add post "' + title + '"', function (err) {
        if (err) return done(err)
        done()
      })
    },
    function (done) {
      async.waterfall([
        function (done) {
          async.map(['develop', 'master'], function (base, done) {
            repo.createPullRequest({
              title: title + ' onto ' + base,
              body: 'This PR has been generated by mvrt.com.',
              base: base,
              head: GH_USER + ':' + branch
            }, function (err, pr) {
              if (err) return done(err)
              done(null, pr.number)
            })
          }, function (err, prs) {
            if (err) return done(err)
            done(null, prs)
          })
        },
        function (prs, done) {
          async.each(prs, function (pr, done) {
            ghMerge({
              user: GH_USER,
              repo: GH_REPO,
              token: GH_TOKEN,
              number: pr
            }, function (err) {
              if (err) return done(err)
              done()
            })
          }, function (err) {
            if (err) return done(err)
            done()
          })
        }
      ], function (err) {
        if (err) return done(err)
        done()
      })
    },
    function (done) {
      repo.deleteRef('heads/' + branch, function (err) {
        if (err) return done(err)
        done()
      })
    }
  ], function (err) {
    if (err) return console.error(err)
    $('[name="post"] button').prop('disabled', true).text('Submitted!')
  })

}

function createPost (title, author, categories, text) {
  if (!title || !author || !text) throw new Error()
    return '---\n' +
      yaml.safeDump({
      title: title.trim(),
      author: author.trim(),
      date: dateformat('isoDateTime'),
      categories: categories.split(' ')
                    .filter(function (cat) { return cat.length })
    }) +
    '---\n\n' +
    text.trim() + '\n'
}

function createTitle (title) {
  if (!title) throw new Error()
  return dateformat('isoDate') + '-' +
    slug(title.toLowerCase()) + '.md'
}

function createBranchName (title) {
  if (!title) throw new Error()
  return 'post-' + slug(title.toLowerCase())
}
